// Mocks generated by Mockito 5.1.0 from annotations
// in spacex_web_project/test/providers/upcoming_launches_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:spacex_web_project/models/upcoming_launch.dart' as _i5;
import 'package:spacex_web_project/services/spacex_api_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

/// A class which mocks [SpaceXApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpaceXApiService extends _i1.Mock implements _i3.SpaceXApiService {
  MockSpaceXApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_0()) as _i2.Client);
  @override
  set client(_i2.Client? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  _i4.Future<List<_i5.UpcomingLaunch>> fetchUpcomingLaunches() =>
      (super.noSuchMethod(Invocation.method(#fetchUpcomingLaunches, []),
          returnValue: Future<List<_i5.UpcomingLaunch>>.value(
              <_i5.UpcomingLaunch>[])) as _i4.Future<List<_i5.UpcomingLaunch>>);
  @override
  _i4.Future<String> fetchLaunchPadName({String? launchPadId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchLaunchPadName, [], {#launchPadId: launchPadId}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
}
